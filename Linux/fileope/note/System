---------------------------------
|File descriptors               |
---------------------------------
0:standard input
1:standard output
2:standard error

---------------------------------
|Interface descriptions         |
---------------------------------
----------------
|  write       |
----------------

#include <unistd.h>

size_t write(int fildes, const void *buf, size_t nbytes);

----------------
|  read        |
----------------

#include <unistd.h>

size_t read(int fildes, void *buf, size_t nbytes);

----------------
|  open        |
----------------

#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

int open(const char *path, int oflags);
int open(const char *path, int oflags, mode_t mode);

For example:

open ("myfile", O_CREAT, S_IRUSR|S_IXOTH);

--------------------------------------------------------------------------------------------
|  Flag      |  Description                                                                |
--------------------------------------------------------------------------------------------
|  O_RDONLY     Open for read-only                                                         |
--------------------------------------------------------------------------------------------
|  O_WRONLY     Open for write-only                                                        |
--------------------------------------------------------------------------------------------
|  O_RDWR       Open for reading and writing                                               |
--------------------------------------------------------------------------------------------
|  O_APPEND     Place written data at the end of the file.                                 |
--------------------------------------------------------------------------------------------
|  O_TRUNC      Set the length of the file to zero, discarding existing contents.          |
--------------------------------------------------------------------------------------------
|  O_CREAT      Creates the file, if necessary, with permissions given in mode .           |
--------------------------------------------------------------------------------------------
|  O_EXCL       Used with O_CREAT, ensures that the caller creates the file.               |
|               The open is atomic; that is,itâ€™s performed with just one function call.    |
|               This protects against two programs creating the file at the same time.     |
|               If the file already exists, open will fail.                                |
--------------------------------------------------------------------------------------------

------------------------------------------------
|  Mode      |  Description                    |
------------------------------------------------
|  S_IRUSR      Read permission, owner         |
------------------------------------------------
|  S_IWUSR      Write permission, owner        |
------------------------------------------------
|  S_IXUSR      Execute permission, owner      |
------------------------------------------------
|  S_IRGRP      Read permission, group         |
------------------------------------------------
|  S_IWGRP      Write permission, group        |
------------------------------------------------
|  S_IXGRP      Execute permission, group      |
------------------------------------------------
|  S_IROTH      Read permission, others        |
------------------------------------------------
|  S_IWOTH      Write permission, others       |
------------------------------------------------
|  S_IXOTH      Execute permission, others     |
------------------------------------------------

----------------
|  close       |
----------------

#include <unistd.h>

int close(int fildes);

----------------
|  ioctl       |
----------------

#include <unistd.h>

int ioctl(int fildes, int cmd, ...);

----------------
|  lseek       |
----------------

#include <unistd.h>
#include <sys/types.h>

off_t lseek(int fildes, off_t offset, int whence);

------------------------------------------------------------------
|  Whence      |  Description                                    |
------------------------------------------------------------------
|  SEEK_SET       offset is an absolute position                 |
------------------------------------------------------------------
|  SEEK_CUR       offset is relative to the current position     |
------------------------------------------------------------------
|  SEEK_END       offset is relative to the end of the file      |
------------------------------------------------------------------

--------------------------------
|  fstat   stat    lstat       |
--------------------------------

#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>

int fstat(int fildes, struct stat *buf);
int stat(const char *path, struct stat *buf);
int lstat(const char *path, struct stat *buf);

------------------------------------------------------------------------------------------------
|Stat Member     | Description                                                                 |
------------------------------------------------------------------------------------------------
|st_mode           File permissions and file-type information                                  |
------------------------------------------------------------------------------------------------
|st_ino            The inode associated with the file                                          |
------------------------------------------------------------------------------------------------
|st_dev            The device the file resides on                                              |
------------------------------------------------------------------------------------------------
|st_uid            The user identity of the file owner                                         |
------------------------------------------------------------------------------------------------
|st_gid            The group identity of the file owner                                        |
------------------------------------------------------------------------------------------------
|st_atime          The time of last access                                                     |
------------------------------------------------------------------------------------------------
|st_ctime          The time of last change to permissions, owner, group, or content            |
------------------------------------------------------------------------------------------------
|st_mtime          The time of last modification to contents                                   |
------------------------------------------------------------------------------------------------
|st_nlink          The number of hard links to the file                                        |
------------------------------------------------------------------------------------------------


------------------------
|  dup      dup2       |
------------------------

#include <unistd.h>

int dup(int fildes);
int dup2(int fildes, int fildes2);


------------------------
|  chmod               |
------------------------

The file specified by path is changed to have the permissions given by mode .
The modes are specified as in the open system call, a bitwise OR of required permissions.
Unless the program has been given appropriate privileges, only the owner of the file or a superuser can change its permissions.

#include <sys/stat.h>

int chmod(const char *path, mode_t mode);

------------------------
|  chown               |
------------------------

A superuser can change the owner of a file using the chown system call.

#include <unistd.h>

int chown(const char *path, uid_t owner, gid_t group);

----------------------------
|  unlink  link  symlink   |
----------------------------
We can remove a file using unlink .
The unlink system call removes the directory entry for a file and decrements the link count for it.
It returns 0 if the unlinking was successful, -1 on an error.
You must have write and execute permissions in the directory where the file has its directory entry for this call to function.

#include <unistd.h>

int unlink(const char *path);
int link(const char *path1, const char *path2);
int symlink(const char *path1, const char *path2);


------------------------
|  mkdir               |
------------------------
The mkdir system call is used for creating directories and is the equivalent of the mkdir program.
mkdir makes a new directory with path as its name.
The directory permissions are passed in the parameter mode and are given as in the O_CREAT option of the open system call and, again, subject to umask .

#include <sys/stat.h>

int mkdir(const char *path, mode_t mode);

------------------------
|  rmdir               |
------------------------

The rmdir system call removes directories, but only if they are empty.
The rmdir program uses this system call to do its job.

#include <unistd.h>

int rmdir(const char *path);

------------------------
|  chdir               |
------------------------

A program can navigate directories in much the same way as a user moves around the file system.
As we use the cd command in the shell to change directory, so a program can use the chdir system call.

#include <unistd.h>

int chdir(const char *path);

------------------------
|  getcwd              |
------------------------

A program can determine its current working directory by calling the getcwd function.

#include <unistd.h>

char *getcwd(char *buf, size_t size);
